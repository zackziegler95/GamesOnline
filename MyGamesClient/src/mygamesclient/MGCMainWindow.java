package mygamesclient;

import java.awt.Color;
import java.awt.event.*;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JTextPane;
import javax.swing.text.DefaultCaret;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 * This is the main GUI Window which the user first sees. From it he can start
 * a new game, join an existing game, or chat with everyone else who is
 * connected.
 * 
 * @author Zack Ziegler <kcazyz@gmail.com>
 * @version 0.8
 * @since 11/24/2012
 */
public class MGCMainWindow extends javax.swing.JFrame {
    public MyGamesClient client = null;
    public HashMap<Integer, MGCLobby> lobbies = null;
    private HashMap<Integer, MGCGame> games = null;
    public String name;
    DefaultListModel userListModel = null;
    DefaultListModel lobbyListModel = null;
    
    private StyledDocument chatDoc = null;
    private SimpleAttributeSet selfNameStyle = null;
    private SimpleAttributeSet otherNameStyle = null;
    private SimpleAttributeSet messageNameStyle = null;
    
    /**
     * Constructor sets up everything for the window.
     */
    public MGCMainWindow() {
        userListModel = new DefaultListModel();
        lobbyListModel = new DefaultListModel();
        //chats = new HashMap();
        initComponents();
        
        selfNameStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(selfNameStyle, Color.RED);
        StyleConstants.setBold(selfNameStyle, true);
        
        otherNameStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(otherNameStyle, Color.BLUE);
        StyleConstants.setBold(otherNameStyle, true);
        
        messageNameStyle = new SimpleAttributeSet();
        
        chatDoc = groupChatTextPane.getStyledDocument();
        
        DefaultCaret caret = (DefaultCaret)groupChatTextPane.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        MouseListener mouseListener = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    if (openLobbiesList.getSelectedValue() != null) {
                        joinGame();
                        openLobbiesList.clearSelection();
                    }
                }
            }
        };
        openLobbiesList.addMouseListener(mouseListener);

        addWindowListener(new clientWindowListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipAddressField = new javax.swing.JTextField();
        ipAddressLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        portLabel = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        usersLabel = new javax.swing.JLabel();
        startNewLobbyButton = new javax.swing.JButton();
        usersScrollPane = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        groupChatScrollPane = new javax.swing.JScrollPane();
        groupChatTextPane = new javax.swing.JTextPane();
        groupChatSendField = new javax.swing.JTextField();
        groupChatSendButton = new javax.swing.JButton();
        openLobbiesLabel = new javax.swing.JLabel();
        openLobbiesScrollPane = new javax.swing.JScrollPane();
        openLobbiesList = new javax.swing.JList();
        joinLobbyButton = new javax.swing.JButton();
        groupChatLabel = new javax.swing.JLabel();
        newGameComboBox = new javax.swing.JComboBox();
        newGameLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyCheckers");
        setResizable(false);

        ipAddressField.setText("127.0.0.1");
        ipAddressField.setNextFocusableComponent(portField);
        ipAddressField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipAddressFieldActionPerformed(evt);
            }
        });

        ipAddressLabel.setText("IP Address:");
        ipAddressLabel.setFocusable(false);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        portLabel.setText("Port:");
        portLabel.setFocusable(false);

        portField.setText("29834");
        portField.setNextFocusableComponent(nameField);
        portField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portFieldActionPerformed(evt);
            }
        });

        statusLabel.setText("Not connected");
        statusLabel.setFocusable(false);

        disconnectButton.setText("Disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("Name:");
        nameLabel.setFocusable(false);

        nameField.setNextFocusableComponent(connectButton);
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        usersLabel.setText("Users:");
        usersLabel.setFocusable(false);

        startNewLobbyButton.setText("Create");
        startNewLobbyButton.setEnabled(false);
        startNewLobbyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNewLobbyButtonActionPerformed(evt);
            }
        });

        userList.setModel(userListModel);
        userList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userList.setFocusable(false);
        userList.setMaximumSize(new java.awt.Dimension(0, 50));
        usersScrollPane.setViewportView(userList);

        groupChatScrollPane.setMaximumSize(new java.awt.Dimension(349, 339));

        groupChatTextPane.setEditable(false);
        groupChatTextPane.setMaximumSize(new java.awt.Dimension(347, 337));
        groupChatTextPane.setPreferredSize(new java.awt.Dimension(100, 337));
        groupChatScrollPane.setViewportView(groupChatTextPane);

        groupChatSendField.setEnabled(false);
        groupChatSendField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupChatSendFieldActionPerformed(evt);
            }
        });

        groupChatSendButton.setText("Send");
        groupChatSendButton.setEnabled(false);
        groupChatSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupChatSendButtonActionPerformed(evt);
            }
        });

        openLobbiesLabel.setText("Open Lobbies:");

        openLobbiesList.setModel(lobbyListModel);
        openLobbiesScrollPane.setViewportView(openLobbiesList);

        joinLobbyButton.setText("Join");
        joinLobbyButton.setEnabled(false);
        joinLobbyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinLobbyButtonActionPerformed(evt);
            }
        });

        groupChatLabel.setText("Group Chat:");

        newGameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Checkers" }));
        newGameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameComboBoxActionPerformed(evt);
            }
        });

        newGameLabel.setText("New Game:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groupChatLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(groupChatSendField)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(groupChatSendButton))
                                .addComponent(groupChatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(usersLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usersScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(connectButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(disconnectButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ipAddressLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(portLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ipAddressField)
                                            .addComponent(portField)
                                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(9, 9, 9)))
                                .addGap(42, 42, 42)))
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 28, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(newGameLabel)
                                            .addComponent(newGameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(25, 25, 25))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(openLobbiesLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(openLobbiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                                            .addComponent(jSeparator3))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(134, 134, 134)
                                        .addComponent(joinLobbyButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addComponent(startNewLobbyButton)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(groupChatLabel)
                                    .addComponent(openLobbiesLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(openLobbiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(joinLobbyButton)
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(newGameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newGameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(startNewLobbyButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(ipAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ipAddressLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(portLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(nameLabel))
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(connectButton)
                                            .addComponent(disconnectButton))
                                        .addGap(15, 15, 15)
                                        .addComponent(usersLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(usersScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(groupChatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(groupChatSendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(groupChatSendButton))))))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Called on when an action is performed on the ipAddressField.
     * @param evt 
     */
    private void ipAddressFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipAddressFieldActionPerformed
        if (connectButton.isEnabled()) {
            connectClient();
        }
    }//GEN-LAST:event_ipAddressFieldActionPerformed

    /**
     * Called on when an action is performed on the portField.
     * @param evt 
     */
    private void portFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portFieldActionPerformed
        if (connectButton.isEnabled()) {
            connectClient();
        }
    }//GEN-LAST:event_portFieldActionPerformed

    /**
     * Called on when an action is performed on the connectButton.
     * @param evt 
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        connectClient();
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * Makes sure you have a name, then attempts to connect to the server.
     * 
     * You may be denied if you name is already taken on the server.
     */
    private void connectClient() {
        String IPAddress = ipAddressField.getText();
        int port = Integer.parseInt(portField.getText());
        name = nameField.getText();
        
        if (name.equals("")) {
            statusLabel.setText("You need a name");
            return;
        }
        
        MyGamesClient c = new MyGamesClient(this);
        if (c.connect(IPAddress, port, name) == 1) {
            this.client = c;
            statusLabel.setText("Connected!");
            
            lobbies = new HashMap();
            games = new HashMap();
            client.sendMessage("server", "###get_lobby_list###");
            
            connectButton.setEnabled(false);
            ipAddressField.setEnabled(false);
            portField.setEnabled(false);
            nameField.setEnabled(false);
            
            disconnectButton.setEnabled(true);
            startNewLobbyButton.setEnabled(true);
            groupChatSendButton.setEnabled(true);
            groupChatSendField.setEnabled(true);
            joinLobbyButton.setEnabled(true);
            
            this.client.start();
        } else {
            statusLabel.setText("Error connecting...");
        }
    }
    
    /**
     * Called from the client to update the user list.
     * 
     * @param names the names of the other people who are connected
     */
    public void setUserList(String[] names) {
        userListModel.clear();
        for (String userName : names) {
            userListModel.addElement(userName);
        }
    }
    
    /**
     * Called from the client to update the lobby list.
     * 
     * @param lobbies the list of lobbies that exist on the server
     */
    public void setLobbyList(String[] l) {
        lobbyListModel.clear();
        for (String lobby : l) {
            String[] parts = lobby.split("-");
            lobbyListModel.addElement(parts[0]+" "+parts[1]+" "+parts[2]);
        }
    }
    
    /**
     * Called when a group message is received. These are messages that are sent
     * to every client, and are put into the group chat.
     * 
     * @param sender the name of the sender
     * @param message the human-readable text of the message
     */
    public void recievedGroupMessage(String sender, String message) {
        if (!sender.equals(name)) {
            try {
                chatDoc.insertString(chatDoc.getLength(), sender+": ", otherNameStyle);
                
                /*char[] chars = message.toCharArray();
                for (char c : chars) {
                    chatDoc.insertString(chatDoc.getLength(), c+"", messageNameStyle);
                }
                chatDoc.insertString(chatDoc.getLength(), "\n", messageNameStyle);*/
                
                chatDoc.insertString(chatDoc.getLength(), message + "\n", messageNameStyle);
                /*groupChatTextPane.setMaximumSize(new Dimension(100, 337));
                groupChatTextPane.setPreferredSize(new Dimension(100, 337));
                groupChatTextPane.setSize(new Dimension(100, 337));
                groupChatScrollPane.setMaximumSize(new Dimension(100, 337));
                groupChatScrollPane.setPreferredSize(new Dimension(100, 337));*/
                //groupChatScrollPane.setSize(new Dimension(100, 337));
            } catch(Exception e) {
                System.err.println(e);
            }
        }
    }
    
    /**
     * Called when the server sends a message to all the players in a game.
     * This can be either in a lobby or in the game itself, they both use the 
     * same chat.
     * 
     * @param sender the name of the message sender
     * @param id the id of the game
     * @param message the human-readable text of the message
     */
    public void recievedGameMessage(String sender, int id, String message) {
        if (lobbies.containsKey(id)) {
            lobbies.get(id).recievedMessage(sender, message);
        } else if (games.containsKey(id)) {
            games.get(id).recievedMessage(sender, message);
        }
    }
    
    /**
     * Called when the server disconnects, useful for when there is a problem,
     * or just to clean up.
     * 
     * @param reason what the GUI will set as the status text
     */
    public void disconnect(String reason) {
        if (client.disconnect() == 1) {
            statusLabel.setText(reason);
            
            connectButton.setEnabled(true);
            ipAddressField.setEnabled(true);
            portField.setEnabled(true);
            nameField.setEnabled(true);
            
            disconnectButton.setEnabled(false);
            startNewLobbyButton.setEnabled(false);
            groupChatSendButton.setEnabled(false);
            groupChatSendField.setEnabled(false);
            joinLobbyButton.setEnabled(false);
            
            for (MGCGame game : games.values()) {
                game.dispose();
            }
            
            lobbies = null;
            games = null;
            
            userListModel.clear();
            
            client = null;
            name = "";
        }
    }
    
    public void notifyServerDisconnect() {
        statusLabel.setText("Server has disconnected");
            
        lobbies = null;
        games = null;

        connectButton.setEnabled(true);
        ipAddressField.setEnabled(true);
        portField.setEnabled(true);
        nameField.setEnabled(true);

        disconnectButton.setEnabled(false);
        startNewLobbyButton.setEnabled(false);
        groupChatSendButton.setEnabled(false);
        groupChatSendField.setEnabled(false);
        joinLobbyButton.setEnabled(false);

        userListModel.clear();

        client = null;
        name = "";
    }
    
    /**
     * Called on when an action is performed on the disconnectButton.
     * @param evt 
     */
    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        disconnect("Disconnected");
    }//GEN-LAST:event_disconnectButtonActionPerformed

    /**
     * Called on when an action is performed on the nameField.
     * @param evt 
     */
    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        if (connectButton.isEnabled()) {
            connectClient();
        }
    }//GEN-LAST:event_nameFieldActionPerformed

    /**
     * Called on when an action is performed on the startNewLobbyButton.
     * @param evt 
     */
    private void startNewLobbyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startNewLobbyButtonActionPerformed
        startNewLobby();
    }//GEN-LAST:event_startNewLobbyButtonActionPerformed

    /**
     * Called on when an action is performed on the joinLobbyButton.
     * @param evt 
     */
    private void joinLobbyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinLobbyButtonActionPerformed
        if (openLobbiesList.getSelectedValue() != null) {
            joinGame();
        } else {
            statusLabel.setText("No lobby selected!");
        }
    }//GEN-LAST:event_joinLobbyButtonActionPerformed

    /**
     * Called when the join game button is pressed, attempts to join the lobby
     * of a game that is waiting.
     */
    private void joinGame() {
        String[] info = ((String) openLobbiesList.getSelectedValue()).split(" ");
        if (!info[1].equals(name)) {
            client.sendMessage("server", "###join_lobby_request###id="+info[0]+"###");
        } else {
            statusLabel.setText("You cannot join your own game!");
        }
        openLobbiesList.clearSelection();
    }
    
    /**
     * Called on when an action is performed on the newGameComboBox.
     * @param evt 
     */
    private void newGameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameComboBoxActionPerformed
        startNewLobby();
    }//GEN-LAST:event_newGameComboBoxActionPerformed

    /**
     * Called on when an action is performed on the groupChatSendButton.
     * @param evt 
     */
    private void groupChatSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupChatSendButtonActionPerformed
        sendGroupText();
    }//GEN-LAST:event_groupChatSendButtonActionPerformed

    /**
     * Called on when an action is performed on the groupChatSendField.
     * @param evt 
     */
    private void groupChatSendFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupChatSendFieldActionPerformed
        sendGroupText();
    }//GEN-LAST:event_groupChatSendFieldActionPerformed
    
    /**
     * Called when the start new lobby button is pressed, sends a request to the
     * server to start a new lobby.
     */
    private void startNewLobby() {
        String gameName = (String) newGameComboBox.getSelectedItem();
        client.sendMessage("server", "###new_lobby###host="+name+"###game="+gameName+"###");
    }
    
    /**
     * Called when the server responds to a new lobby request, or a join lobby
     * request. Makes a new window for the lobby and adds it to the list.
     * 
     * @param id the id of the new lobby
     * @param host the host of the lobby
     * @param game the game that the lobby is for
     */
    public void openNewLobby(int id, String host, String game) {
        final MGCLobby newLobby = new MGCLobby(id, host, game, this, client);
        lobbies.put(id, newLobby);

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                newLobby.setVisible(true);
            }
        });
    }
    
    /**
     * Updates the list of players in the lobby.
     * 
     * @param id the id of the game
     * @param players the new list of players
     */
    public void updateLobby(int id, String[] players) {
        MGCLobby lobby = lobbies.get(id);
        lobby.updatePlayersList(players);
    }
    
    /**
     * Toggles the status of the lobby as either ready or not ready.
     * 
     * @param id the id of the lobby 
     * @param yes true means ready, false means not ready
     */
    public void lobbyAllReady(int id, boolean yes) {
        lobbies.get(id).allReady(yes);
    }
    
    /**
     * Called when the lobby closes, sends a message to the server to let it
     * know what has happened.
     * 
     * @param id the id of the lobby
     * @param host the name of the host
     */
    public void notifyLobbyClose(int id, String host) {
        if (host.equals(name)) {
            client.sendMessage("server", "###killed_lobby###id="+id+"###");
        } else if (!host.equals("")) {
            client.sendMessage("server", "###left_lobby###id="+id+"###");
        }
        lobbies.remove(id);
    }
    
    /**
     * Called when the server tells the client that the host of a game you were
     * in has left.
     * 
     * @param id the id of the lobby
     */
    public void lobbyHostDisconnected(int id) {
        if (lobbies.containsKey(id)) {
            lobbies.get(id).notifyHostDisconnect();
        }
    }
    
    /**
     * Called when the server doesn't allow the client to join the lobby.
     * @param reason 
     */
    public void joiningLobbyFailed(String reason) {
        if (reason.equals("full")) {
            statusLabel.setText("Lobby is full");
        }
    }
    
    /**
     * Called if the client is the host of a game and pressed the start button.
     * Tells the server that the client has started the game.
     * 
     * @param id the id of the game that has started
     */
    public void startNewGame(int id) {
        client.sendMessage("server", "###new_game###lobby_id="+id+"###");
    }
    
    /**
     * Opens the window for a new game and removes the window for the lobby.
     * 
     * @param id the id of the game
     * @param game the name of the game
     * @param partner the partner who you will play the game with
     * @param myTurn true if it is your turn, false if not
     */
    public void openNewGame(int id, String game, String partner, boolean myTurn, String board) {
        if (game.equals("Checkers")) {
            final MGCCheckers newCheckers = new MGCCheckers(id, client, this, partner);
            newCheckers.setTurn(myTurn);
            
            int[][] b = new int[8][8];
            String[] rows = board.substring(1, board.length()-1).split("\\],\\[");
            rows[0] = rows[0].substring(1, rows[0].length());
            rows[7] = rows[7].substring(0, rows[7].length()-1);

            for (int y = 0; y < 8; y++) {
                String chars[] = rows[y].split(",");
                for (int x = 0; x < 8; x++) {
                    b[y][x] = Integer.parseInt(chars[x]);
                }
            }
            
            newCheckers.writeBoard(b, "New game started!");
            
            games.put(id, newCheckers);
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    newCheckers.setVisible(true);
                }
            });
        }
        lobbies.get(id).dispose();
        lobbies.remove(id);
    }
    
    public void reportServerResponse(int id, String data) {
        MGCGame game = games.get(id);
        if (game.gameType.equals("Checkers")) {
            int res = Integer.parseInt(data.substring(
                    data.indexOf("res=")+4, data.indexOf("###from")));
            int[] from = {Integer.parseInt(data.charAt(data.indexOf("from=")+5)+""),
                Integer.parseInt(data.charAt(data.indexOf("from=")+7)+"")};
            int[] to = {Integer.parseInt(data.charAt(data.indexOf("to=")+3)+""),
                Integer.parseInt(data.charAt(data.indexOf("to=")+5)+"")};
            ((MGCCheckers) game).receiveServerRes(from, to, res);
        }
    }
    
    public void incGameMove(int id, String newBoard) {
        MGCGame game = games.get(id);
        if (game.gameType.equals("Checkers")) {
            int[][] b = new int[8][8];
            String[] rows = newBoard.substring(1, newBoard.length()-1).split("\\],\\[");
            rows[0] = rows[0].substring(1, rows[0].length());
            rows[7] = rows[7].substring(0, rows[7].length()-1);

            for (int y = 0; y < 8; y++) {
                String chars[] = rows[y].split(",");
                for (int x = 0; x < 8; x++) {
                    b[y][x] = Integer.parseInt(chars[x]);
                }
            }
            MGCCheckers checkers = (MGCCheckers) game;
            
            checkers.writeBoard(b, "New move from "+(checkers.getPartner()));
            checkers.setTurn(true);
        }
    }
    
    /**
     * Called from the client when the server tells the client the game is over.
     * 
     * @param id id of game
     * @param win true if won, false if lost
     */
    public void notifyEnd(int id, boolean win) {
        MGCGame game = games.get(id);
        if (game.gameType.equals("Checkers")) {
            ((MGCCheckers) game).notifyEnd(win);
        }
    }
    
    /**
     * Called from the server when a player that this client is playing a game
     * with has either disconnected or left the game.
     * 
     * @param id the id of the game
     */
    public void notifyPlayerDisconnected(int id) {
        MGCGame game = games.get(id);
        if (game.gameType.equals("Checkers")) {
            ((MGCCheckers) game).notifyPlayerDisconnected();
        }
    }
    
    /**
     * Sends the message that is in the groupChatSendField to all the clients
     * that are connected.
     */
    private void sendGroupText() {
        String txt = groupChatSendField.getText();
        if (!txt.equals("")) {
            if (client.sendMessage("server", "###group_message="+txt+"###") == 1) {
                try {
                    chatDoc.insertString(chatDoc.getLength(), "You: ", selfNameStyle);
                    chatDoc.insertString(chatDoc.getLength(), txt + "\n", messageNameStyle);
                } catch(Exception e) {
                    System.err.println(e);
                }                
                groupChatSendField.setText("");
            } else {
                System.err.println("Error writing message");
            }
        }
    }
    
    public void alertGameClosed(int id) {
        MGCGame game = games.get(id);
        if (game.gameType.equals("Checkers")) {
            if (!((MGCCheckers) game).gameOver) {
                client.sendMessage("server", "###game_closed###id="+id+"###");
            } else {
                client.sendMessage("server", "###game_window_closed_after_end###id="+id+"###");
            }
        }
        games.remove(id);
    }
    
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MGCMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MGCMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MGCMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MGCMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MGCMainWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JLabel groupChatLabel;
    private javax.swing.JScrollPane groupChatScrollPane;
    private javax.swing.JButton groupChatSendButton;
    private javax.swing.JTextField groupChatSendField;
    private javax.swing.JTextPane groupChatTextPane;
    private javax.swing.JTextField ipAddressField;
    private javax.swing.JLabel ipAddressLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton joinLobbyButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JComboBox newGameComboBox;
    private javax.swing.JLabel newGameLabel;
    private javax.swing.JLabel openLobbiesLabel;
    private javax.swing.JList openLobbiesList;
    private javax.swing.JScrollPane openLobbiesScrollPane;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton startNewLobbyButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JList userList;
    private javax.swing.JLabel usersLabel;
    private javax.swing.JScrollPane usersScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Called when the window is closed to disconnect the client from the
     * server.
     */
    private class clientWindowListener extends WindowAdapter {
        @Override
        public void windowClosing(WindowEvent e) {
            if (client != null) {
                disconnect("");
            }
        }
    }
}
