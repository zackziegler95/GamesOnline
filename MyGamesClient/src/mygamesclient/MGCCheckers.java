package mygamesclient;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import javax.swing.JOptionPane;

/**
 * @author Zack Ziegler
 * @version 0.8
 * @since 11/24/2012
 */
public class MGCCheckers extends MGCGame {
    private String partner = "";
    private HashMap prevBoard = null;
    private int num_undos = 0;
    private boolean myTurn = false;
    private boolean waitingForReply;
    private URL soundFile = null;
    
    public boolean gameOver = false;
    
    //private Timer timeoutCheck;
        
    /**
     * Constructor takes initializing info and sets up the game.
     * 
     * @param id id the server has given the game
     * @param partner String of the name of the partner
     * @param client the client object of the user of the game
     * @param mainWindow the main GUI object of the user of the game
     */
    public MGCCheckers(int id, MyGamesClient client, MGCMainWindow mainWindow, String partner) {
        super(id, client, mainWindow, "Checkers");
        this.partner = partner;
        
        initComponents();
        setTitle("Game with " + partner);
        
        soundFile = this.getClass().getResource("assets/audio/floop.wav");
        
        //If you ever want to impliment a timeout checker:
        /*timeoutCheck = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                undoMove();
            }
        });*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JTextField sendField = this.sendField;
        javax.swing.JButton sendButton = this.sendButton;
        javax.swing.JPanel gamePanel = new CheckersPanel();
        this.gamePanel = (CheckersPanel) gamePanel;
        centerSeparator = new javax.swing.JSeparator();
        confirmMoveButton = new javax.swing.JButton();
        undoMoveButton = new javax.swing.JButton();
        turnLabel = new javax.swing.JLabel();
        connectionLabel = new javax.swing.JLabel();
        chatLabel = new javax.swing.JLabel();
        giveupButton = new javax.swing.JButton();
        javax.swing.JScrollPane chatScrollPane = this.chatScrollPane;
        javax.swing.JTextPane chatTextPane = this.chatTextPane;

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chat with ...");
        setResizable(false);

        sendField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFieldActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        gamePanel.setBackground(java.awt.Color.white);
        gamePanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gamePanel.setFocusable(false);
        gamePanel.setMaximumSize(new java.awt.Dimension(400, 400));
        gamePanel.setMinimumSize(new java.awt.Dimension(400, 400));
        gamePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gamePanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        centerSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        confirmMoveButton.setText("Confirm Move");
        confirmMoveButton.setEnabled(false);
        confirmMoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmMoveButtonActionPerformed(evt);
            }
        });

        undoMoveButton.setText("Undo");
        undoMoveButton.setEnabled(false);
        undoMoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMoveButtonActionPerformed(evt);
            }
        });

        turnLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        turnLabel.setText("Your turn:");

        connectionLabel.setText("You've started a new game");

        chatLabel.setText("Chat:");

        giveupButton.setText("Give up");
        giveupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giveupButtonActionPerformed(evt);
            }
        });

        chatScrollPane.setAutoscrolls(true);
        chatScrollPane.setFocusable(false);
        chatScrollPane.setInheritsPopupMenu(true);
        chatScrollPane.setMaximumSize(new java.awt.Dimension(329, 400));
        chatScrollPane.setMinimumSize(new java.awt.Dimension(329, 400));
        chatScrollPane.setPreferredSize(new java.awt.Dimension(329, 400));

        chatTextPane.setEditable(false);
        chatTextPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chatTextPane.setFocusable(false);
        chatTextPane.setMaximumSize(new java.awt.Dimension(329, 400));
        chatTextPane.setMinimumSize(new java.awt.Dimension(329, 400));
        chatTextPane.setPreferredSize(new java.awt.Dimension(329, 400));
        chatScrollPane.setViewportView(chatTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(turnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(giveupButton))
                            .addComponent(gamePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(confirmMoveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(undoMoveButton)))
                        .addGap(12, 12, 12)
                        .addComponent(centerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(sendField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chatLabel)
                                    .addComponent(chatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(connectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(turnLabel))
                        .addComponent(chatLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(giveupButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(centerSeparator)
                    .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(undoMoveButton)
                        .addComponent(sendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confirmMoveButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(connectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Functions to communicate with chat
    
    /**
     * Called when the confirmMoveButton is pressed, confirms a move already made and sends it to
     * the sever.
     * 
     * @param evt the event object passed
     */
    private void confirmMoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmMoveButtonActionPerformed
        myTurn = false;
        client.sendMessage("server", "###new_move###id="+id+"###player="+name+"###new_board="+gamePanel.getFormattedBoard()+"###");
        prevBoard = null;
        setTurn(false);
        confirmMoveButton.setEnabled(false);
        undoMoveButton.setEnabled(false);
        gamePanel.setSelected(-1, -1);
        connectionLabel.setText("Move submitted...");
    }//GEN-LAST:event_confirmMoveButtonActionPerformed

    /**
     * Called when the undoMoveButton is pressed, undos the action that the player has made.
     * 
     * @param evt the event object passed
     */
    private void undoMoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMoveButtonActionPerformed
        undoMove();
    }//GEN-LAST:event_undoMoveButtonActionPerformed

    private void undoMove() {
        int[][] pBoard = (int[][]) prevBoard.get(num_undos);
        for (int y = 0; y < 8; y++) {
            for (int x = 0; x < 8; x++) {
                if (pBoard[y][x] - gamePanel.getBoard()[y][x] == 1) {
                    gamePanel.setSelected(x, y);
                }
            }
        }
        
        gamePanel.setBoard(pBoard);
        num_undos -= 1;
        if (num_undos == 0) {
            gamePanel.setSelected(-1, -1);
            confirmMoveButton.setEnabled(false);
            undoMoveButton.setEnabled(false);
        }
    }
    
    /**
     * Called when the mouse presses the game panel, contains the logic for moving the pieces.
     * 
     * @param evt the event object passed
     */
    private void gamePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gamePanelMousePressed
        if (!waitingForReply) {
            int x_pos = (int)Math.floor(evt.getX()/50.0);
            int y_pos = (int)Math.floor(evt.getY()/50.0);

            if (myTurn) {
                if (gamePanel.selected == null &&
                        (gamePanel.getBoard()[y_pos][x_pos] == 1 || gamePanel.getBoard()[y_pos][x_pos] == 2) &&
                        num_undos == 0) {
                    gamePanel.setSelected(x_pos, y_pos);
                } else if (gamePanel.selected != null) {
                    int[] from = gamePanel.getSelected();
                    int[] to = {x_pos, y_pos};
                    client.sendMessage("server", "###check_game_move###"
                            + "id="+id+"###name="+name+"###from="+from[0]+","+from[1]+"###to="+to[0]+","+to[1]+"###");
                    
                    waitingForReply = true;
                    giveupButton.setEnabled(false);
                    confirmMoveButton.setEnabled(false);
                    undoMoveButton.setEnabled(false);
                    sendField.setEnabled(false);
                    sendButton.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_gamePanelMousePressed

    public void receiveServerRes(int[] from, int[] to, int res) {
        if ((res == 1 && num_undos == 0) || (res == 2)) {
            num_undos += 1;
            prevBoard.put(num_undos, gamePanel.getBoard());
            int[] s = gamePanel.getSelected();

            int type = gamePanel.removePiece(s[0], s[1]);
            if (to[1] == 0) {
                gamePanel.addPiece(to[0], to[1], 2);
            } else {
                gamePanel.addPiece(to[0], to[1], type);
            }

            confirmMoveButton.setEnabled(true);
            undoMoveButton.setEnabled(true);
            if (res == 1) {
                gamePanel.setSelected(-1, -1);
            } else if (res == 2) {
                int dir_x = (int) ((to[0]-s[0])/2);
                int dir_y = (int) ((to[1]-s[1])/2);
                gamePanel.removePiece(s[0]+dir_x, s[1]+dir_y);
                gamePanel.setSelected(to[0], to[1]);
            }
        } else if (num_undos == 0) {
            gamePanel.setSelected(-1, -1);
        }
        waitingForReply = false;
        giveupButton.setEnabled(true);
        confirmMoveButton.setEnabled(true);
        undoMoveButton.setEnabled(true);
        sendField.setEnabled(true);
        sendButton.setEnabled(true);
    }
    
    /**
     * Called when the giveupButton is pressed.
     * @param evt the event object passed
     */
    private void giveupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giveupButtonActionPerformed
        client.sendMessage("server", "###i_give_up###id="+id+"###");
    }//GEN-LAST:event_giveupButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        sendText();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void sendFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFieldActionPerformed
        if (sendButton.isEnabled()) {
            sendText();
        }
    }//GEN-LAST:event_sendFieldActionPerformed

   
    // Functions to communicate with the Checkers game
    /**
     * Changes the turn to either your turn or not your turn.
     * 
     * @param turn true means your turn, false means your partner's turn
     */
    public void setTurn(boolean turn) {
        myTurn = turn;
        if (turn) {
            turnLabel.setText("Your turn:");
        } else {
            turnLabel.setText(partner+"'s turn:");
        }
    }
    
    /**
     * Sounds a notification through the audio stream.
     */
    public void soundNotification() {
        try {
            AudioInputStream soundIn = AudioSystem.getAudioInputStream(soundFile);
            AudioFormat format = soundIn.getFormat();
            DataLine.Info info = new DataLine.Info(Clip.class, format);

            Clip clip = (Clip)AudioSystem.getLine(info);
            clip.open(soundIn);
            clip.start();
            while(clip.isRunning())
            {
                Thread.yield();
            }
        } catch(Exception e) {
            System.err.println(e.getMessage());
        }
    }
    
    /**
     * Called from the main GUI window to change the board of this window.
     * 
     * @param board the int[][] representation of the game board
     * @param message the plaint-text message which the server adds
     */
    public void writeBoard(int[][] board, String message) {
        gamePanel.setBoard(board);
        prevBoard = new HashMap();
        num_undos = 0;
        connectionLabel.setText(message);
        
        if (message.contains("New move from ")) {
            soundNotification();
        }
    }
    
    /**
     * Called from the server when the other person loses or gives up.
     * 
     * @param win true if won, false if lost
     */
    public void notifyEnd(boolean win) {
        myTurn = false;
        prevBoard = null;
        confirmMoveButton.setEnabled(false);
        undoMoveButton.setEnabled(false);
        gamePanel.setSelected(-1, -1);
        giveupButton.setEnabled(false);
        
        if (win) {
            turnLabel.setText("You won!");
            JOptionPane.showMessageDialog(null, "You won! Congrats.", "You Won", JOptionPane.INFORMATION_MESSAGE);
        } else {
            turnLabel.setText("You lost!");
            JOptionPane.showMessageDialog(null, "You lost! Better luck next time.", "You Lost", JOptionPane.INFORMATION_MESSAGE);
        }
        gameOver = true;
    }
    
    public void notifyPlayerDisconnected() {
        myTurn = false;
        prevBoard = null;
        confirmMoveButton.setEnabled(false);
        undoMoveButton.setEnabled(false);
        gamePanel.setSelected(-1, -1);
        giveupButton.setEnabled(false);
        
        turnLabel.setText("You won!");
        JOptionPane.showMessageDialog(null, "Your partner has left, you win!", "You Won", JOptionPane.INFORMATION_MESSAGE);
        gameOver = true;
    }
    
    public String getPartner() {
        return partner;
    }
    
    /**
     * The main game screen of the game, holds the board.
     */
    private class CheckersPanel extends GamePanel {
        private int[][] board = null;
        private int[] selected = null;
        
        private Image red_piece = null;
        private Image blue_piece = null;
        private Image red_piece_king = null;
        private Image blue_piece_king = null;
        
        /**
         * Constructor initializes the images for the board pieces.
         */
        public CheckersPanel() {
            try {
                red_piece = ImageIO.read(this.getClass().getResource("assets/images/red_piece.png"));
                blue_piece = ImageIO.read(this.getClass().getResource("assets/images/blue_piece.png"));
                red_piece_king = ImageIO.read(this.getClass().getResource("assets/images/red_piece_king.png"));
                blue_piece_king = ImageIO.read(this.getClass().getResource("assets/images/blue_piece_king.png"));
            } catch (IOException e) {
                System.out.println("could not open file");
            }
        }
        
        /**
         * Gets the position of the selected piece.
         * 
         * @return (x, y) coordinate of the selected piece
         */
        public int[] getSelected() {
            return selected;
        }
        
        /**
         * Sets the selected piece and repaints the board.
         * 
         * @param x x position of piece
         * @param y y position of piece
         */
        public void setSelected(int x, int y) {
            if (x == -1 && y == -1) {
                selected = null;
            } else {
                selected = new int[2];
                selected[0] = x;
                selected[1] = y;
            }
            repaint();
        }
        
        /**
         * Adds a piece to the board.
         * 
         * @param x x position of the piece
         * @param y y position of the piece
         * @param type int representation of the type of piece
         */
        public void addPiece(int x, int y, int type) {
            if (board[y][x] == 0 && (type == 1 || type == 2 || type == 3 || type ==3)) {
                board[y][x] = type;
                repaint();
            } else {
                System.err.println("Error: A piece is already there");
            }
        }
        
        /**
         * Takes a piece away from the board and repaints.
         * 
         * @param x x position of the piece
         * @param y y position of the piece
         * @return 0 means error, otherwise returned int is the type of piece
         * removed
         */
        public int removePiece(int x, int y) {
            if (board[y][x] != 0) {
                int res = board[y][x];
                board[y][x] = 0;
                repaint();
                return res;
            } else {
                System.err.println("Error: no piece exists there");
                return 0;
            }
        }
        
        /**
         * Returns the current state of the board.
         * 
         * @return int[][] representation of the board
         */
        public int[][] getBoard() {
            int[][] b = new int[8][8];
            for (int y = 0; y < 8; y++) {
                System.arraycopy(board[y], 0, b[y], 0, 8);
            }
            return b;
        }
        
        /**
         * Return a human-readable version of the board.
         * 
         * @return a String representation of the board
         */
        public String getFormattedBoard() {
            String res = "[";
            for (int[] y : board) {
                res += "[";
                for (int x: y) {
                    res += x+",";
                }
                res = res.substring(0, res.length()-1);
                res += "],";
            }
            res = res.substring(0, res.length()-1);
            res += "]";
            return res;
        }
        
        /**
         * Sets the state of the board to be something entirely different and
         * repaints.
         * 
         * @param newBoard the int[][] representation of the new board
         */
        public void setBoard(int[][] newBoard) {
            this.board = newBoard;
            repaint();
        }
        
        /**
         * Overrides the paintComponent method to draw the board.
         * 
         * @param g the Graphics object that is used to paint
         */
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            //Draw the background
            g.setColor(Color.BLACK);
            for (int y = 0; y < 8; y++) {
                for (int x = 0; x < 8; x++) {
                    if ((x+y) % 2 == 0) {
                        g.fillRect(x*50, y*50, 50, 50);
                    }
                }
            }
            
            //Draw the selection
            g.setColor(Color.GREEN);
            if (selected != null) {
                g.fillRect(selected[0]*50, selected[1]*50, 50, 50);
            }
            
            //Draw the pieces
            if (board != null) {
                for (int y = 0; y < board.length; y++) {
                    for (int x = 0; x < board.length; x++) {
                        if (board[y][x] == 1) {
                            g.drawImage(red_piece, x*50+5, y*50+5, x*50+45, y*50+45,
                                                   0, 0, red_piece.getWidth(null), red_piece.getHeight(null), null);
                        } else if (board[y][x] == 2) {
                            g.drawImage(red_piece_king, x*50+5, y*50+5, x*50+45, y*50+45,
                                                   0, 0, red_piece_king.getWidth(null), red_piece_king.getHeight(null), null);
                        } else if (board[y][x] == 3) {
                            g.drawImage(blue_piece, x*50+5, y*50+5, x*50+45, y*50+45,
                                                   0, 0, blue_piece.getWidth(null), blue_piece.getHeight(null), null);
                        } else if (board[y][x] == 4) {
                            g.drawImage(blue_piece_king, x*50+5, y*50+5, x*50+45, y*50+45,
                                                   0, 0, blue_piece_king.getWidth(null), blue_piece_king.getHeight(null), null);
                        }
                    }
                }
            }
        }
    }

    private CheckersPanel gamePanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator centerSeparator;
    private javax.swing.JLabel chatLabel;
    private javax.swing.JButton confirmMoveButton;
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JButton giveupButton;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JButton undoMoveButton;
    // End of variables declaration//GEN-END:variables
}